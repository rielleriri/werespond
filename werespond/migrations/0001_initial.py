# Generated by Django 3.0.5 on 2020-04-16 15:36

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Achievement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=50, verbose_name='Achievement Name')),
                ('condition', models.CharField(max_length=50, verbose_name='Achievement Condition')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Case',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('location', models.CharField(max_length=600, verbose_name='Case Location')),
                ('lattitude', models.FloatField(verbose_name='Lattitude')),
                ('longitude', models.FloatField(verbose_name='Longitude')),
                ('time', models.DateField(auto_now_add=True, verbose_name='Time of Case')),
                ('description', models.CharField(max_length=600, verbose_name='Case Description')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Case Updated At')),
                ('case_type', models.CharField(choices=[('c', 'Cardiac Arrest'), ('f', 'Fire Case')], max_length=1, verbose_name='Case Type')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('image', models.ImageField(null=True, upload_to=None)),
                ('name', models.CharField(max_length=50, verbose_name='Event Name')),
                ('description', models.CharField(max_length=500, verbose_name='Event Description')),
                ('date', models.DateField(verbose_name='Event Date')),
                ('time', models.TimeField(verbose_name='Event Time')),
                ('venue', models.CharField(max_length=200, verbose_name='Event Venue')),
                ('slots', models.IntegerField(verbose_name='Event Slots')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('profile_pic', models.ImageField(null=True, upload_to=None)),
                ('display_pic', models.ImageField(null=True, upload_to=None)),
                ('name', models.CharField(max_length=50, verbose_name='Group Name')),
                ('description', models.CharField(max_length=100, verbose_name='Group Description')),
                ('email', models.EmailField(max_length=254, null=True, verbose_name='Group Email')),
                ('website', models.CharField(max_length=100, verbose_name='Group Website')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Group Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Group Updated At')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Post',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('body', models.CharField(max_length=600, verbose_name='Post Body')),
                ('image', models.ImageField(null=True, upload_to=None)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('group', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='werespond.Group')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='QuizChoice',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('is_correct', models.BooleanField(verbose_name='Correct Ans')),
                ('choice', models.CharField(max_length=500, verbose_name='Choice')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='QuizQuestion',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('question', models.CharField(max_length=400, verbose_name='Quiz Qns')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('hp_no', models.IntegerField(primary_key=True, serialize=False, unique=True, verbose_name='User Hp No.')),
                ('name', models.CharField(max_length=60, verbose_name='User Full Name')),
                ('gender', models.CharField(choices=[('m', 'Male'), ('f', 'Female')], default='m', max_length=1)),
                ('is_admin', models.BooleanField(default=False, verbose_name='Admin User?')),
                ('email', models.EmailField(max_length=254, null=True, verbose_name='User Email')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='User Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='User Updated At')),
            ],
            options={
                'ordering': ('hp_no',),
            },
        ),
        migrations.CreateModel(
            name='AchievementReward',
            fields=[
                ('achievement', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, primary_key=True, serialize=False, to='werespond.Achievement')),
                ('reward', models.ImageField(null=True, upload_to=None)),
            ],
            options={
                'ordering': ('achievement',),
            },
        ),
        migrations.CreateModel(
            name='UserCertificate',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('cert_type', models.CharField(choices=[('c', 'CPR'), ('a', 'AED'), ('b', 'CPR+AED'), ('s', 'Standard First Aid'), ('o', 'Occupational First Aid'), ('p', 'Psychological First Aid'), ('f', 'Fire Safety')], max_length=1, verbose_name='User Cert Type')),
                ('expiry', models.DateField(verbose_name='User Cert Expiry')),
                ('awarded_at', models.DateTimeField(auto_now_add=True)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='werespond.User')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='UserAchievement',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('date_awarded', models.DateTimeField(auto_now=True)),
                ('achievement', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='werespond.Achievement')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='werespond.User')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('case', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='werespond.Case')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='werespond.User')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='Report',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('location', models.CharField(max_length=250, verbose_name='Report Location')),
                ('description', models.CharField(max_length=250, verbose_name='Report Description')),
                ('image', models.ImageField(null=True, upload_to=None)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Report submitted at')),
                ('report_type', models.CharField(choices=[('c', 'Cardiac Arrest'), ('f', 'Fire Report'), ('h', 'Fire Hazard')], max_length=1)),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='werespond.User')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='QuizUserAnswer',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('question', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='werespond.QuizQuestion')),
                ('question_choice', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='werespond.QuizChoice')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='werespond.User')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.AddField(
            model_name='quizchoice',
            name='question',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='werespond.QuizQuestion'),
        ),
        migrations.CreateModel(
            name='PostVote',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes', to='werespond.Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='votes_user', to='werespond.User')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='PostSave',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='saves', to='werespond.Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='werespond.User')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.AddField(
            model_name='post',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='post_user', to='werespond.User'),
        ),
        migrations.AddField(
            model_name='group',
            name='members',
            field=models.ManyToManyField(related_name='groups', to='werespond.User'),
        ),
        migrations.CreateModel(
            name='EventAttendance',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('attendance', models.BooleanField(verbose_name='Event Attendance')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='werespond.Event')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='werespond.User')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.AddField(
            model_name='event',
            name='users',
            field=models.ManyToManyField(blank=True, related_name='events', through='werespond.EventAttendance', to='werespond.User'),
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('content', models.CharField(max_length=140)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('post', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comments', to='werespond.Post')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='comment_user', to='werespond.User')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.CreateModel(
            name='CertificateForm',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('certificate', models.CharField(choices=[('c', 'CPR'), ('a', 'AED'), ('b', 'CPR+AED'), ('s', 'Standard First Aid'), ('o', 'Occupational First Aid'), ('p', 'Psychological First Aid'), ('f', 'Fire Safety')], max_length=1, verbose_name='Cert Type')),
                ('image', models.ImageField(null=True, upload_to=None)),
                ('expiry', models.DateField(verbose_name='Cert Expiry')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='werespond.User')),
            ],
            options={
                'ordering': ('id',),
            },
        ),
        migrations.AddField(
            model_name='case',
            name='users',
            field=models.ManyToManyField(related_name='cases', through='werespond.Response', to='werespond.User'),
        ),
        migrations.AddField(
            model_name='achievement',
            name='users',
            field=models.ManyToManyField(blank=True, related_name='achievements', through='werespond.UserAchievement', to='werespond.User'),
        ),
    ]
